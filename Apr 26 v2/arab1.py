# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Arawindow-copy.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import csv, codecs
import os
import io
import pandas as pd
from PyQt5 import QtPrintSupport
from PyQt5.QtGui import (QImage, QPainter, QIcon, QKeySequence, QIcon, QTextCursor, QPalette,
                                          QCursor, QDropEvent, QTextDocument, QTextTableFormat, QColor, QBrush)
from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import (QFile, QSettings, Qt, QFileInfo, QItemSelectionModel, QDir,
                                            QMetaObject, QAbstractTableModel, QModelIndex, QVariant)
from PyQt5.QtWidgets import (QMainWindow , QAction, QWidget, QLineEdit, QMessageBox, QAbstractItemView, QApplication,
                            QTableWidget, QTableWidgetItem, QGridLayout, QFileDialog, QMenu, QInputDialog, QPushButton)


class Ui_ArabicCheck(QWidget):
    def setupUi(self, ArabicCheck):
        ArabicCheck.setObjectName("ArabicCheck")
        ArabicCheck.resize(1097, 298)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(ArabicCheck.sizePolicy().hasHeightForWidth())
        ArabicCheck.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon.fromTheme("arabic")
        ArabicCheck.setWindowIcon(icon)
        self.centralwidget = QtWidgets.QWidget(ArabicCheck)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.centralwidget.sizePolicy().hasHeightForWidth())
        self.centralwidget.setSizePolicy(sizePolicy)
        self.centralwidget.setMaximumSize(QtCore.QSize(1980, 1080))
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setMaximumSize(QtCore.QSize(75, 16777215))
        self.label_3.setObjectName("label_3")
        self.gridLayout_2.addWidget(self.label_3, 0, 1, 1, 2)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setMaximumSize(QtCore.QSize(215, 16777215))
        self.lineEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.lineEdit.setAlignment(QtCore.Qt.AlignCenter)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout_2.addWidget(self.lineEdit, 0, 3, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 4, 1, 1)
        self.Split = QtWidgets.QComboBox(self.centralwidget)
        self.Split.setObjectName("Split")
        self.Split.addItem("")
        self.Split.addItem("")
        self.Split.addItem("")
        self.gridLayout_2.addWidget(self.Split, 0, 5, 1, 1)
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(0)
        self.tableWidget.setRowCount(0)
        self.gridLayout_2.addWidget(self.tableWidget, 0, 6, 3, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout_2.addWidget(self.label, 1, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.gridLayout_2.addWidget(self.label_2, 1, 3, 1, 1)
        self.EngtextEdit = QtWidgets.QTextEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EngtextEdit.sizePolicy().hasHeightForWidth())
        self.EngtextEdit.setSizePolicy(sizePolicy)
        self.EngtextEdit.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.EngtextEdit.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.EngtextEdit.setObjectName("EngtextEdit")
        # contextedit
        self.EngtextEdit.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        # self.EngtextEdit.setContextMenuPolicy(Qt.CustomContextMenu)
        self.EngtextEdit.customContextMenuRequested.connect(self.contextMenuEvent)
        #ContextMenu use for mouse rightclick function
        # end contextedit
        self.gridLayout_2.addWidget(self.EngtextEdit, 2, 0, 1, 2)
        self.ArabtextEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.ArabtextEdit.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustIgnored)
        self.ArabtextEdit.setObjectName("ArabtextEdit")
        # contextedit
        self.ArabtextEdit.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        # self.EngtextEdit.setContextMenuPolicy(Qt.CustomContextMenu)
        self.ArabtextEdit.customContextMenuRequested.connect(self.arabcontextMenuEvent)

        self.gridLayout_2.addWidget(self.ArabtextEdit, 2, 2, 1, 2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.writetofile = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.writetofile.sizePolicy().hasHeightForWidth())
        self.writetofile.setSizePolicy(sizePolicy)
        self.writetofile.setObjectName("writetofile")
        self.gridLayout.addWidget(self.writetofile, 0, 0, 1, 1)
        self.next_all = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.next_all.sizePolicy().hasHeightForWidth())
        self.next_all.setSizePolicy(sizePolicy)
        self.next_all.setObjectName("next_all")
        self.gridLayout.addWidget(self.next_all, 0, 1, 1, 1)
        self.nextline = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nextline.sizePolicy().hasHeightForWidth())
        self.nextline.setSizePolicy(sizePolicy)
        self.nextline.setObjectName("nextline")
        self.gridLayout.addWidget(self.nextline, 1, 0, 1, 1)
        self.nextline_ar = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nextline_ar.sizePolicy().hasHeightForWidth())
        self.nextline_ar.setSizePolicy(sizePolicy)
        self.nextline_ar.setObjectName("nextline_ar")
        self.gridLayout.addWidget(self.nextline_ar, 1, 1, 1, 1)
        self.prevline_en = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.prevline_en.sizePolicy().hasHeightForWidth())
        self.prevline_en.setSizePolicy(sizePolicy)
        self.prevline_en.setObjectName("prevline_en")
        self.gridLayout.addWidget(self.prevline_en, 2, 0, 1, 1)
        self.prevline_ar = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.prevline_ar.sizePolicy().hasHeightForWidth())
        self.prevline_ar.setSizePolicy(sizePolicy)
        self.prevline_ar.setObjectName("prevline_ar")
        self.gridLayout.addWidget(self.prevline_ar, 2, 1, 1, 1)
        self.clearenglish = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clearenglish.sizePolicy().hasHeightForWidth())
        self.clearenglish.setSizePolicy(sizePolicy)
        self.clearenglish.setObjectName("clearenglish")
        self.gridLayout.addWidget(self.clearenglish, 3, 0, 1, 1)
        self.cleararabic = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cleararabic.sizePolicy().hasHeightForWidth())
        self.cleararabic.setSizePolicy(sizePolicy)
        self.cleararabic.setObjectName("cleararabic")
        self.gridLayout.addWidget(self.cleararabic, 3, 1, 1, 1)
        self.clearall = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.clearall.sizePolicy().hasHeightForWidth())
        self.clearall.setSizePolicy(sizePolicy)
        self.clearall.setObjectName("clearall")
        self.gridLayout.addWidget(self.clearall, 4, 0, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 2, 4, 1, 2)
        self.savetable = QtWidgets.QPushButton(self.centralwidget)
        self.savetable.setObjectName("savetable")
        self.gridLayout_2.addWidget(self.savetable, 3, 6, 1, 1)
        ArabicCheck.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ArabicCheck)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1097, 22))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        ArabicCheck.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ArabicCheck)
        self.statusbar.setObjectName("statusbar")
        ArabicCheck.setStatusBar(self.statusbar)
        self.action_Open = QtWidgets.QAction(ArabicCheck)
        self.action_Open.setObjectName("action_Open")
        self.action_Save = QtWidgets.QAction(ArabicCheck)
        self.action_Save.setObjectName("action_Save")
        self.action_Exit = QtWidgets.QAction(ArabicCheck)
        self.action_Exit.setObjectName("action_Exit")
        self.menuFile.addAction(self.action_Open)
        self.menuFile.addAction(self.action_Save)
        self.menuFile.addAction(self.action_Exit)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(ArabicCheck)
        QtCore.QMetaObject.connectSlotsByName(ArabicCheck)

        #extra functions
        self.isChanged = False
        self.clearenglish.clicked.connect(self.EngtextEdit.clear)
        self.cleararabic.clicked.connect(self.ArabtextEdit.clear)
        self.cleararabic.clicked.connect(self.ArabtextEdit.clear)
        self.action_Open.triggered.connect(self.loadCsv)
        self.next_all.clicked.connect(self.readnextall)
        self.nextline.clicked.connect(self.readnext)
        self.prevline_en.clicked.connect(self.readpreviousen)
        self.nextline_ar.clicked.connect(self.readnextar)
        self.prevline_ar.clicked.connect(self.readpreviousar)
        self.writetofile.clicked.connect(self.writerowtocsv)
        self.clearall.clicked.connect(self.allclear)
        self.savetable.clicked.connect(self.saveToExisting)


    def retranslateUi(self, ArabicCheck):
        _translate = QtCore.QCoreApplication.translate
        ArabicCheck.setWindowTitle(_translate("ArabicCheck", "MainWindow"))
        self.label_3.setText(_translate("ArabicCheck", "File Name"))
        self.label_4.setText(_translate("ArabicCheck", "Separate"))
        self.Split.setItemText(0, _translate("ArabicCheck", ";"))
        self.Split.setItemText(1, _translate("ArabicCheck", ","))
        self.Split.setItemText(2, _translate("ArabicCheck", "\\t"))
        self.label.setText(_translate("ArabicCheck", "ENGLISH"))
        self.label_2.setText(_translate("ArabicCheck", "ARABIC"))
        self.EngtextEdit.setHtml(_translate("ArabicCheck", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\"-qt-paragraph-type:empty; margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><br /></p></body></html>"))
        self.writetofile.setText(_translate("ArabicCheck", "Write"))
        self.next_all.setText(_translate("ArabicCheck", "Next All"))
        self.nextline.setText(_translate("ArabicCheck", "Next Line-EN"))
        self.nextline_ar.setText(_translate("ArabicCheck", "Next Line-AR"))
        self.prevline_en.setText(_translate("ArabicCheck", "Prev Line-EN"))
        self.prevline_ar.setText(_translate("ArabicCheck", "Prev Line-AR"))
        self.clearenglish.setText(_translate("ArabicCheck", "Clear-EN"))
        self.cleararabic.setText(_translate("ArabicCheck", "Clear-AR"))
        self.clearall.setText(_translate("ArabicCheck", "Clear all"))
        self.savetable.setText(_translate("ArabicCheck", "Save"))
        self.menuFile.setTitle(_translate("ArabicCheck", "File"))
        self.action_Open.setText(_translate("ArabicCheck", "&Open"))
        self.action_Save.setText(_translate("ArabicCheck", "&Save"))
        self.action_Exit.setText(_translate("ArabicCheck", "&Exit"))
    #user Functions
    # def contextMenuEvent(self, location):
    #     menu = self.EngtextEdit.createStandardContextMenu(location)
    #     # add extra items to the menu
    #     # selectedword = self.textedit.textCursor().selectedText()
    #     self.setContextMenuPolicy(Qt.ActionsContextMenu)
    #     defineAction = QtWidgets.QAction("Define", self)
    #     defineAction.triggered.connect(lambda: self.define(event))
    #     self.addAction(defineAction)
    #     synonymAction = QtWidgets.QAction("Find Synonyms", self)
    #     synonymAction.triggered.connect(lambda: self.synonym(event))
    #     self.addAction(synonymAction)
    #     # show the menu
    #     menu.popup(location)
    def contextMenuEvent(self, event):
        contextMenu = self.EngtextEdit.createStandardContextMenu(self.mapToGlobal(event))
        # contextMenu = QMenu(self)
        writ_Act = contextMenu.addAction("Write")
        open_Act = contextMenu.addAction("Open")
        quit_Act = contextMenu.addAction("Quit")
        action = contextMenu.exec_(self.EngtextEdit.viewport().mapToGlobal(event))
        if action == writ_Act:
            self.writecolumntocsv(column=0)
            self.close()
        if action == quit_Act:
            self.close()

    def arabcontextMenuEvent(self, event):
        ara_contextMenu = self.ArabtextEdit.createStandardContextMenu(event)
        # contextMenu = QMenu(self)
        ara_writ_Act = ara_contextMenu.addAction("Write")
        open_Act = ara_contextMenu.addAction("Open")
        quit_Act = ara_contextMenu.addAction("Quit")
        ara_action = ara_contextMenu.exec_(self.ArabtextEdit.viewport().mapToGlobal(event))
        #.viewport() -> used to show the rightclick menu inside the box
        if ara_action == ara_writ_Act:
            self.writecolumntocsv(column=1)
            self.close()
        if ara_action == quit_Act:
            self.close()

    def loadCsv(self):
        if self.isChanged == True:
            quit_msg = "<b>The Document was changed.<br>Do you want to save changes?</ b>"
            reply = QMessageBox.question(self, 'Save Confirmation',
                     quit_msg, QMessageBox.Yes, QMessageBox.No)
            if reply == QMessageBox.Yes:
                self.saveOnQuit()
        fileName, _ = QFileDialog.getOpenFileName(self, "Open CSV",
        (QDir.homePath() + "/Documents/CSV"), "CSV (*.csv *.tsv *.txt)")
        if fileName:
            self.loadCsvOnOpen(fileName)
            self.lineEdit.clear()
            self.lineEdit.setText(self.fileName.split('/')[-1])
    def loadCsvOnOpen(self,fileName):
        if fileName:
            print(fileName)
            self.fileName = fileName
            delimeter=self.Split.currentText()
            df = pd.read_csv(fileName, header=None, delimiter=delimeter, keep_default_na=False, error_bad_lines=False)
            header = df.iloc[0]
            self.df =df
            self.arcount=0
            self.encount=0
            try:
                self.ArabtextEdit.append(df[0][self.arcount])
            except:
                self.ArabtextEdit.append('Null')
            try:
                self.EngtextEdit.append(df[1][self.encount])
            except:
                self.EngtextEdit.append('Null')
            #self.loadDfOnOpen(df)
            self.tableWidget.clear()
            self.tableWidget.setRowCount(0)
            self.tableWidget.setColumnCount(2)
    def readnextall(self):
        self.encount+=1
        self.arcount+=1
        try:
            self.ArabtextEdit.append(self.df[0][self.arcount])
        except:
            self.ArabtextEdit.append('Null')
        try:
            self.EngtextEdit.append(self.df[1][self.encount])
        except:
            self.EngtextEdit.append('Null')
    def readnext(self):
        self.encount+=1
        # try:
        #     self.ArabtextEdit.append(self.df[0][self.count])
        # except:
        #     self.ArabtextEdit.append('Null')
        try:
            self.EngtextEdit.append(self.df[1][self.encount])
        except:
            self.EngtextEdit.append('Null')
    def readnextar(self):
        self.arcount+=1
        try:
            self.ArabtextEdit.append(self.df[0][self.arcount])
        except:
            self.ArabtextEdit.append('Null')
        # try:
        #     self.EngtextEdit.append(self.df[1][self.count])
        # except:
        #     self.EngtextEdit.append('Null')
    def readpreviousen(self):
        self.encount-=1
        Engtxt=self.EngtextEdit.toPlainText()
        # self.EngtextEdit.insertPlainText(self.df[1][self.encount]+self.EngtextEdit.toPlainText())
        # try:
        #     self.ArabtextEdit.append(self.df[0][self.count])
        # except:
        # #     self.ArabtextEdit.append('Null')
        try:
            self.EngtextEdit.clear()
            self.EngtextEdit.insertPlainText(self.df[1][self.encount]+Engtxt)

        except:
            self.EngtextEdit.append('Null')
    def readpreviousar(self):
        self.arcount-=1
        arbtxt=self.ArabtextEdit.toPlainText()
        try:
            self.ArabtextEdit.clear()
            self.ArabtextEdit.insertPlainText(self.df[0][self.arcount]+arbtxt)

        except:
            self.ArabtextEdit.append('Null')
        # try:
        #     self.EngtextEdit.append(self.df[1][self.count])
        # except:
        #     self.EngtextEdit.append('Null')
    def writerowtocsv(self):
        try:
            path=self.fileName
        except:
            self.fileName = self.lineEdit.text()
            self.tableWidget.setColumnCount(2)
        dftext= pd.DataFrame({'0': [self.ArabtextEdit.toPlainText()],
                   '1': [self.EngtextEdit.toPlainText()]})
         # changed to output.csv to filename.csv
        dftext.to_csv(self.fileName.split('/')[-1], mode='a', index=False,header=None)
        #self.textEdit.insertPlainText(self.ArabtextEdit.toPlainText()+','+self.EngtextEdit.toPlainText())
        currentRowCount = self.tableWidget.rowCount() #necessary even when there are no rows in the table
        print(currentRowCount)
        #self.tableWidget.insertRow(currentRowCount+1)
        self.tableWidget.setRowCount(currentRowCount+1)
        self.tableWidget.setItem(currentRowCount, 1, QTableWidgetItem(self.ArabtextEdit.toPlainText()))
        self.tableWidget.setItem(currentRowCount, 0, QTableWidgetItem(self.EngtextEdit.toPlainText()))

        self.EngtextEdit.clear()
        self.ArabtextEdit.clear()
    def saveToExisting(self):
        path = self.fileName.split('/')[-1]
        if path:
            ofile = open(path, 'r')
            reader_data = csv.reader(ofile, delimiter=self.Split.currentText())
            old_data=[]
            for cell in reader_data:
                old_data.append(cell)
            ofile.close()
            print('olddata',old_data)
            # remove already existing rows
            with open(path, 'w') as stream:
                print("saving", path)
                writer = csv.writer(stream, delimiter=self.Split.currentText())
                if old_data!=[]:
                    for item in old_data[:-self.tableWidget.rowCount()]:
                        writer.writerow(item)
                # write table data from g
                for row in range(self.tableWidget.rowCount()):
                    print('Row Count',str(self.tableWidget.rowCount()))
                    rowdata =[]
                    for column in range(self.tableWidget.columnCount()):
                        item = self.tableWidget.item(row, column)
                        #print('item',item.text())
                        if item is not None:
                            rowdata.append(item.text())
                        else:
                            rowdata.append('')
                    writer.writerow(rowdata)
        self.isChanged = False

    def writecolumntocsv(self,column):
        try:
            path=self.fileName
        except:
            self.fileName = self.lineEdit.text()
            self.tableWidget.setColumnCount(2)


        try:
            csvread= pd.read_csv(self.fileName.split('/')[-1],header=None)
        except:
            pass
        if(column==0):
            selectedword = self.EngtextEdit.textCursor().selectedText()
            dftext= pd.DataFrame({'0': [selectedword],
                       '1': ['']})
            dftext.to_csv(self.fileName.split('/')[-1], mode='a', index=False,header=None)
            currentRowCount = self.tableWidget.rowCount() #necessary even when there are no rows in the table
            print(currentRowCount)
            #self.tableWidget.insertRow(currentRowCount+1)
            self.tableWidget.setRowCount(currentRowCount+1)
            self.tableWidget.setItem(currentRowCount, 0, QTableWidgetItem(selectedword))

        if (column==1):

            selectedword = self.ArabtextEdit.textCursor().selectedText()
            print(selectedword)
            csvread[1][len(csvread.index)-1]=selectedword
            csvread.to_csv(self.fileName.split('/')[-1], mode='w', index=False,header=None)
            # self.tableWidget.setColumnCount(2)
            currentRowCount = self.tableWidget.rowCount() #necessary even when there are no rows in the table

            self.tableWidget.insertRow(currentRowCount-1) # insertRow( bcz of same row second coloumn writing is not working)

            print(currentRowCount)
            # self.tableWidget.setItem(currentRowCount, 1, QTableWidgetItem(selectedword))
            self.tableWidget.setItem(currentRowCount,1,QTableWidgetItem(str(selectedword))) #add a new row and insert data
            self.tableWidget.removeRow(currentRowCount-1) #remove the row above (which is empty)

    def allclear(self):
        self.EngtextEdit.clear()
        self.ArabtextEdit.clear()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    ArabicCheck = QtWidgets.QMainWindow()
    ui = Ui_ArabicCheck()
    ui.setupUi(ArabicCheck)
    ArabicCheck.show()
    sys.exit(app.exec_())
